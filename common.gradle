apply plugin: 'maven-publish'
apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'me.fallenbreath.yamlang'

int mcVersion = project.mcVersion

repositories {
    maven {
        url = 'https://masa.dy.fi/maven'
    }

    maven {
        url = 'https://maven.fallenbreath.me/jitpack'
    }

    maven {
        url = 'https://maven.fallenbreath.me/releases'
    }

    maven {
        url = "https://maven.terraformersmc.com/releases/"
    }

    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup("curse.maven")
        }
    }

    maven {
        name = "Modrinth Maven"
        url = "https://api.modrinth.com/maven"

        content {
            includeGroup("maven.modrinth")
        }
    }
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
    modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}

static String curseForgeOrOther(version, curseForge, other) {
    return ((version as String) ==~ /\d+/ ? curseForge : other) + ':' + version
}

// list of (dependencyNotation -> should use modImplementation)
def mod_dependencies = [[mcVersion >= 12101 ? "com.github.sakura-ryoko:malilib:${project.malilib_version}" : "fi.dy.masa.malilib:${project.malilib_version}", true],
                        [curseForgeOrOther(project.itemscroller_file_id, 'curse.maven:item-scroller-242064', 'com.github.sakura-ryoko:itemscroller'), true],
                        ["carpet:fabric-carpet:${project.carpet_version}", true],
                        ["maven.modrinth:chunk-debug:${project.chunk_debug_version}", true],
                        // we're using modmenu for mc 1.15.2 for 1.14.4, so we use modCompileOnly
                        ["com.terraformersmc:modmenu:${project.mod_menu_version}", mcVersion >= 11500 && mcVersion < 12106],]

dependencies {
    // loom
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    mod_dependencies.forEach { item ->
        def dependencyNotation = item[0]
        def activatedInRuntime = item[1]
        if (activatedInRuntime) {
            modImplementation(dependencyNotation) {
                exclude group: 'com.github.sakura-ryoko', module: 'malilib'
            }
        } else {
            modCompileOnly(dependencyNotation) {
                exclude group: 'com.github.sakura-ryoko', module: 'malilib'
            }
        }
    }

    def fanetlibMcVer = mcVersion >= 12100 ? '1.21' : mcVersion >= 12006 ? '1.20.6' : mcVersion >= 12002 ? '1.20.2' : '1.15.2'
    include(modImplementation("me.fallenbreath:fanetlib:${project.fanetlib_version}-mc${fanetlibMcVer}"))
    include(modImplementation("me.fallenbreath:conditional-mixin-fabric:${project.conditionalmixin_version}"))
}

String LANG_DIR = 'assets/unlimitedtrade/lang'
JavaVersion JAVA_COMPATIBILITY
if (mcVersion >= 11800) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_16
}

loom {
    runConfigs.configureEach {
        // to make sure it generates all "Minecraft Client (:subproject_name)" applications
        ideConfigGenerated = true
        runDir '../../run'
        vmArgs '-Dmixin.debug.export=true'
    }

//	// [FEATURE] MIXIN_AUDITOR
//	runs {
//		serverMixinAudit {
//			server()
//			vmArgs '-DmixinAuditor.audit=true'
//			ideConfigGenerated false
//		}
//	}
}

String modVersionSuffix = ''
String fullProjectVersion

// Example version values:
//   project.mod_version     1.0.3                      (the base mod version)
//   modVersionSuffix        +build.88                  (use github action build number if possible)
//   fullModVersion          1.0.3+build.88             (the actual mod version to use in the mod)
//   fullProjectVersion      v1.0.3-mc1.15.2+build.88   (in build output jar name)

// detect github action environment variables
// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
if (System.getenv("BUILD_RELEASE") != "true") {
    String buildNumber = System.getenv("BUILD_ID")
    modVersionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '-SNAPSHOT'
}
String fullModVersion = project.mod_version + modVersionSuffix

group = project.maven_group
if (System.getenv("JITPACK") == "true") {
    // move mc version into archivesBaseName, so jitpack will be able to organize archives from multiple subprojects correctly
    base.archivesName = project.archives_base_name + '-mc' + project.minecraft_version
    fullProjectVersion = 'v' + project.mod_version + modVersionSuffix
} else {
    base.archivesName = project.archives_base_name
    fullProjectVersion = 'v' + project.mod_version + '-mc' + project.minecraft_version + modVersionSuffix
}
version = fullProjectVersion

def MIXIN_CONFIG_PATHS = ["unlimitedtrademod.client.mixins.json",
                          "unlimitedtrademod.server.mixins.json",
                          "unlimitedtrademod.chunkdebug.mixins.json"]

processResources {
    inputs.property "id", project.mod_id
    inputs.property "name", project.mod_name
    inputs.property "version", fullModVersion
    inputs.property "minecraft_dependency", project.minecraft_dependency
    inputs.property "carpet_dependency", project.carpet_dependency

    filesMatching("fabric.mod.json") {
        def valueMap = ["id"                  : project.mod_id,
                        "name"                : project.mod_name,
                        "version"             : fullModVersion,
                        "minecraft_dependency": project.minecraft_dependency,
                        "malilib_dependency"  : project.malilib_dependency,
                        "carpet_dependency"   : project.carpet_dependency]
        expand valueMap
    }

    filesMatching("unlimitedtrademod.chunkdebug.mixins.json") {
        def valueMap = ["archivesBaseName": archivesBaseName,]
        expand valueMap
    }

    MIXIN_CONFIG_PATHS.each { mixinConfigPath ->
        filesMatching(mixinConfigPath) {
            filter { s -> s.replace('{{COMPATIBILITY_LEVEL}}', "JAVA_${JAVA_COMPATIBILITY.ordinal() + 1}") }
        }
    }
}

// https://github.com/Fallen-Breath/yamlang
yamlang {
    targetSourceSets = [sourceSets.main]
    inputDir = LANG_DIR
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    if (JAVA_COMPATIBILITY <= JavaVersion.VERSION_1_8) {
        // suppressed "source/target value 8 is obsolete and will be removed in a future release"
        options.compilerArgs << '-Xlint:-options'
    }
}

java {
    sourceCompatibility = JAVA_COMPATIBILITY
    targetCompatibility = JAVA_COMPATIBILITY

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${project.archives_base_name}" }
    }
}
